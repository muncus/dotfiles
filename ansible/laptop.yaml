# Ansible playbook to reconstruct my work laptop.
# run with ansible-playbook -b -K
- hosts: localhost
  gather_facts: no
  connection: local
  vars:
    primary_user: "muncus"
  tasks:
  - name: udev rules
    copy:
      src: "udevrules/"
      dest: /etc/udev/rules.d/
      backup: true
  - name: "restart udev"
    ansible.builtin.command: /usr/bin/systemctl restart udev
    become: yes
    become_user: root
  - name: Install apt tools
    ansible.builtin.apt:
      pkg:
      - software-properties-common # installs add-apt-repository tool
  - name: "add repo: gh"
    block:
      - name: gh repo key
        ansible.builtin.get_url:
          url: https://cli.github.com/packages/githubcli-archive-keyring.gpg
          dest: /usr/share/keyrings/githubcli-archive-keyring.gpg

      - name: gh repo add
        ansible.builtin.apt_repository:
          repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main"
          state: present
  - name: "add repo: gcloud"
    block:
      - name: gcloud repo key
        ansible.builtin.get_url:
          url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
          dest: /usr/share/keyrings/gcloud-keyring.armored.gpg
      - name: gcloud repo key, dearmor
        ansible.builtin.command: gpg  --dearmor --yes -o /usr/share/keyrings/gcloud-keyring.gpg /usr/share/keyrings/gcloud-keyring.armored.gpg

      - name: gcloud repo add
        ansible.builtin.apt_repository:
          repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/gcloud-keyring.gpg] https://packages.cloud.google.com/apt cloud-sdk main"
          state: present
  - name: Install packages
    ansible.builtin.apt:
      pkg:
      - docker.io
      - gh # github cli
      - git
      - golang-1.21
      - google-cloud-cli
      - google-cloud-cli-gke-gcloud-auth-plugin
      - kubectl
  - name: Install kube-ps1
    become_user: "{{ vars.primary_user }}"
    ansible.builtin.get_url:
      url: https://raw.githubusercontent.com/jonmosco/kube-ps1/master/kube-ps1.sh
      dest: ~/bin/kube-ps1.sh
  - name: install Taskfile.dev
    ansible.builtin.command:
      cmd: /usr/bin/env go install github.com/go-task/task/v3/cmd/task@latest
    become_user: "{{ vars.primary_user }}"
  - name: install gotestsum
    ansible.builtin.command:
      cmd: /usr/bin/env go install gotest.tools/gotestsum@latest
    become_user: "{{ vars.primary_user }}"
  - name: install cloud-sql-proxy
    ansible.builtin.command:
      cmd: /usr/bin/env go install github.com/GoogleCloudPlatform/cloud-sql-proxy/v2@latest
    become_user: "{{ vars.primary_user }}"
  - name: install kubectx
    ansible.builtin.command:
      cmd: /usr/bin/env go install github.com/ahmetb/kubectx/cmd/kubectx@latest
    become_user: "{{ vars.primary_user }}"
  - name: install glow
    ansible.builtin.command:
      cmd: /usr/bin/go install github.com/charmbracelet/glow@latest
    become_user: "{{ vars.primary_user }}"
  - name: install kubens
    ansible.builtin.command:
      cmd: /usr/bin/env go install github.com/ahmetb/kubectx/cmd/kubens@latest
    become_user: "{{ vars.primary_user }}"
  - name: "capslock -> ctrl"
    ansible.builtin.command: gsettings set org.gnome.desktop.input-sources xkb-options "['ctrl:nocaps']"
    become_user: "{{ vars.primary_user }}"
  - name: "Gnome: trackball scrolling"
    ansible.builtin.command: gsettings set org.gnome.desktop.peripherals.trackball scroll-wheel-emulation-button 8
    become_user: "{{ vars.primary_user }}"
  - name: "Gnome: embiggen fonts"
    ansible.builtin.command: gsettings set org.gnome.desktop.interface text-scaling-factor 1.25
    become_user: "{{ vars.primary_user }}"
  - name: "Gnome: dark mode"
    ansible.builtin.command: gsettings set org.gnome.desktop.interface color-scheme '"prefer-dark"'
    become_user: "{{ vars.primary_user }}"
  - name: "Gnome: workspaces on both monitors"
    ansible.builtin.command: gsettings set org.gnome.mutter workspaces-only-on-primary false
    become_user: "{{ vars.primary_user }}"
  - name: Install nvm
    block:
    - name: nvm dir
      become_user: "{{ vars.primary_user }}"
      ansible.builtin.file:
        path: ~/.config/nvm
        state: directory
        mode: '0755'
    - name: install nvm
      become_user: "{{ vars.primary_user }}"
      ansible.builtin.shell: >
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash

  # what else?
  # - pull my dotfiles down and install them.
  # TODO: this needs creds because the repo is private. either make public or split into "system" vs "user" configs.
  # - name: "install streamdeck"
  #   ansible.builtin.command: go install github.com/muncus/my-streamdeck/cmd/my-streamdeck@latest
  #   become_user: "{{ vars.primary_user }}"
